
version: 3

dotenv: [ '.env' ]

tasks:

    build-golang:
        silent: true
        internal: true
        vars:
            GOLANG_VERSION:
                sh: lynx -dump -listonly {{.GOLANG_URL}} | awk '{print $2}' | grep 'go'{{.VERSION}} | grep 'linux-'{{.GOLANG_ARCH}} | sed -r 's,.*/go('$1'.*).linux.*,\1,g' | sort -V | tail -n1
            GOLANG_SOURCE:
                sh: lynx -dump -listonly {{.GOLANG_URL}} | awk '{print $2}' | grep 'go'{{.GOLANG_VERSION}} | grep 'linux-'{{.GOLANG_ARCH}}'.tar.gz' | head -n1
        cmds:
            - echo "- {{.TITLE}}"
            - sed -i '/VERSION=/d; /SOURCE=/d;' .env
            - echo -e "GOLANG_VERSION={{.GOLANG_VERSION}}\nGOLANG_SOURCE={{.GOLANG_SOURCE}}\nVERSION={{.VERSION}}" >> .env
            - docker compose build --push
            - sed -i '/VERSION=/d; /SOURCE=/d;' .env
            - echo "[ Done ]"

    build:
        desc: 'Build Go Programming Language'
        silent: true
        cmds:
            - echo -e '\e[44;1m[ Building Go Programming Language ]\e[0;0m'
            - for: { var: GOLANG_VERSION_LIST }
              task: build-golang
              vars:
                TITLE: 'Golang {{.ITEM}}'
                VERSION: '{{.ITEM}}'

    checkout-golang:
        silent: true
        internal: true
        vars:
            TAG:
                sh: lynx -dump -listonly {{.GOLANG_URL}} | awk '{print $2}' | grep 'go'{{.VERSION}} | grep 'linux-'{{.GOLANG_ARCH}} | sed -r 's,.*/go('$1'.*).linux.*,\1,g' | sort -V | tail -n1
        cmds:
            - echo -n "{{.TAG}} "

    checkout:
        silent: true
        cmds:
            - for: { var: GOLANG_VERSION_LIST }
              task: checkout-golang
              vars:
                VERSION: '{{.ITEM}}'

    all:
        desc: 'Build and Synchronize'
        silent: true
        cmds:
            - task: build

    default:
        silent: true
        cmds:
            - task -l
